#! /usr/bin/env python3
from model import TimeIt
from model import setup_logging

"""
Handle lists of path and value tuples and their conversion to tree structurs.
List format:

    (path1.path2. ... pathN, (typecode, summary, detail, uid))

Tree format:

    path1 -> path2 -> ... -> pathN -> [(typecode, summary, detail, uid)]

Examples
Agenda: year -> week -> day -> [(typecode, summary, times, uid)]
Index: path[0] -> path[1] -> ... -> (typecode, summary, datetime, uid)
"""

class RDict(dict):
    tab = 3 * " "

    def __missing__(self, key):
            self[key] = RDict()
            return self[key]

    def add(self, tkeys, values=()):
        i = 0
        keys = tkeys.split('.')
        for key in keys:
            i = i + 1
            if i == len(keys):
                self.setdefault(key, []).append(values)
            self = self[key]

    def as_tree(self, t = None, depth = 0):
        """ print a tree """
        if t is None:
            t = self
        for k in t.keys():
            print("%s%s" % (depth * RDict.tab,  k))
            depth += 1
            if type(t[k]) == RDict:
                self.as_tree(t[k], depth)
            else:
                for v in t[k]:
                    print("%s%s" % (depth * RDict.tab, v))
            depth -= 1

import bisect
class SList(list):
    """
    List of lists. Compoents have the format: period delimited path string, tuple ending with uid. 
    """

    def add(self, path_tuple, values_tuple):
        """
        Use bisect to preserve order
        """
        bisect.insort(self, ('.'.join(path_tuple), values_tuple))

    def remove(self, uid):
        _len = len(self)
        tmp = [x for x in self if x[1][-1] != uid]
        print('removed: {} rows for {}'.format(_len - len(tmp), uid))
        self[:] = tmp

if __name__ == '__main__':

    from random import randint, choice
    from pprint import pprint

    # sample data
    types = [
            ['*', 'event', 'datetime'],
            ['-', 'task', 'due'],
            ['%', 'record', 'date'],
            ]
    items = []
    uids = []
    for i in range(100):
        u = randint(100, 1000)
        items.append(tuple(choice(types) + [str(u)]))

    data = SList()
    for y in range(2016, 2019):
        year = "{}".format(y)
        for w in range(1, randint(5, 9)):
            week = "{:>2}".format(randint(1, 53))
            for d in range(1, randint(2, 6)):
                day = "{}".format(randint(0, 6))
                for j in range(1, randint(2, 5)):
                    item = choice(items)
                    uids.append(item[-1])
                    data.add((year, week, day), item)
                    # u = "{}".format(randint(1, 1000))
                    # uids.append(u)
                    # data.add((year, week, day), (u,))

    print()
    print("starting data:", len(data), "items")
    for i in range(4):
        uid = choice(uids)
        data.remove(uid)

    print()

    print("ending data:", len(data), "items")
    pprint(data)

    # create recursive dict from data
    index = RDict()
    for path, value in data:
        # add(index, path, value)
        index.add(path, value)

    print()
    pprint(index)

    print()
    index.as_tree()

# starting data: 155 items
# removed: 2 rows for 249
# removed: 1 rows for 724
# removed: 1 rows for 334
# removed: 1 rows for 578

# ending data: 150 items
# [('2016.16.5', ('890',)),
#  ('2016.20.1', ('924',)),
#  ('2016.20.1', ('961',)),
#  ('2016.20.2', ('318',)),
#  ('2016.20.2', ('776',)),
#  ('2016.20.2', ('829',)),
#  ('2016.20.2', ('962',)),
#  ('2016.20.3', ('436',)),
#  ('2016.20.3', ('792',)),
#  ('2016.20.5', ('996',)),
#  ('2016.23.0', ('937',)),
#  ('2016.23.5', ('56',)),
#  ('2016.23.5', ('796',)),
#  ('2016.23.5', ('942',)),
#  ('2016.31.2', ('833',)),
#  ('2016.31.3', ('507',)),
#  ('2016.31.3', ('573',)),
#  ('2016.31.3', ('58',)),
#  ('2016.31.3', ('603',)),
#  ('2016.31.3', ('962',)),
#  ('2016.31.3', ('999',)),
#  ('2016.31.5', ('135',)),
#  ('2016.31.5', ('167',)),
#  ('2016.31.5', ('651',)),
#  ('2016.31.5', ('695',)),
#  ('2016.33.0', ('148',)),
#  ('2016.33.0', ('38',)),
#  ('2016.33.0', ('446',)),
#  ('2016.33.0', ('526',)),
#  ('2016.33.0', ('832',)),
#  ('2016.33.0', ('950',)),
#  ('2016.33.0', ('981',)),
#  ('2016.33.2', ('638',)),
#  ('2016.33.3', ('714',)),
#  ('2016.33.3', ('809',)),
#  ('2016.33.4', ('440',)),
#  ('2016.33.4', ('588',)),
#  ('2016.33.4', ('952',)),
#  ('2016.33.5', ('139',)),
#  ('2016.33.5', ('148',)),
#  ('2016.33.5', ('702',)),
#  ('2016.33.5', ('933',)),
#  ('2016.33.6', ('118',)),
#  ('2016.33.6', ('565',)),
#  ('2016.33.6', ('64',)),
#  ('2016.35.0', ('296',)),
#  ('2016.35.0', ('526',)),
#  ('2016.35.0', ('741',)),
#  ('2016.35.0', ('743',)),
#  ('2016.35.0', ('757',)),
#  ('2016.35.0', ('970',)),
#  ('2016.35.6', ('608',)),
#  ('2016.35.6', ('977',)),
#  ('2017.12.0', ('122',)),
#  ('2017.12.0', ('225',)),
#  ('2017.12.0', ('725',)),
#  ('2017.15.5', ('505',)),
#  ('2017.15.5', ('968',)),
#  ('2017.27.1', ('190',)),
#  ('2017.27.1', ('24',)),
#  ('2017.27.1', ('295',)),
#  ('2017.27.1', ('680',)),
#  ('2017.27.1', ('746',)),
#  ('2017.27.1', ('829',)),
#  ('2017.27.1', ('910',)),
#  ('2017.27.4', ('310',)),
#  ('2017.27.4', ('329',)),
#  ('2017.27.4', ('805',)),
#  ('2017.27.4', ('83',)),
#  ('2017.27.6', ('464',)),
#  ('2017.27.6', ('536',)),
#  ('2017.27.6', ('571',)),
#  ('2017.27.6', ('983',)),
#  ('2017.30.3', ('10',)),
#  ('2017.30.3', ('427',)),
#  ('2017.30.3', ('462',)),
#  ('2017.30.3', ('607',)),
#  ('2017.30.6', ('459',)),
#  ('2017.30.6', ('871',)),
#  ('2017.31.1', ('561',)),
#  ('2017.31.1', ('813',)),
#  ('2017.31.1', ('863',)),
#  ('2017.31.2', ('351',)),
#  ('2017.31.2', ('608',)),
#  ('2017.31.2', ('765',)),
#  ('2017.31.5', ('25',)),
#  ('2017.31.5', ('84',)),
#  ('2017.31.5', ('984',)),
#  ('2017.31.6', ('136',)),
#  ('2017.31.6', ('589',)),
#  ('2017.31.6', ('744',)),
#  ('2017.43.2', ('205',)),
#  ('2017.43.2', ('328',)),
#  ('2017.43.2', ('542',)),
#  ('2017.43.2', ('838',)),
#  ('2017.43.5', ('134',)),
#  ('2017.43.5', ('135',)),
#  ('2017.43.5', ('160',)),
#  ('2017.43.5', ('243',)),
#  ('2017.43.5', ('547',)),
#  ('2017.43.5', ('573',)),
#  ('2017.43.5', ('755',)),
#  ('2017.43.5', ('795',)),
#  ('2017.43.6', ('167',)),
#  ('2017.43.6', ('248',)),
#  ('2017.46.2', ('152',)),
#  ('2017.46.2', ('410',)),
#  ('2017.46.2', ('625',)),
#  ('2017.46.2', ('798',)),
#  ('2017.46.5', ('430',)),
#  ('2017.46.5', ('493',)),
#  ('2017.46.5', ('872',)),
#  ('2017.46.6', ('389',)),
#  ('2017.46.6', ('538',)),
#  ('2018.12.0', ('733',)),
#  ('2018.12.0', ('968',)),
#  ('2018.12.1', ('18',)),
#  ('2018.12.3', ('837',)),
#  ('2018.12.3', ('988',)),
#  ('2018.12.4', ('285',)),
#  ('2018.12.4', ('371',)),
#  ('2018.12.4', ('520',)),
#  ('2018.12.4', ('826',)),
#  ('2018.12.5', ('315',)),
#  ('2018.12.5', ('333',)),
#  ('2018.12.5', ('417',)),
#  ('2018.12.5', ('731',)),
#  ('2018.14.6', ('683',)),
#  ('2018.27.5', ('195',)),
#  ('2018.27.6', ('2',)),
#  ('2018.27.6', ('700',)),
#  ('2018.27.6', ('72',)),
#  ('2018.27.6', ('749',)),
#  ('2018.33.0', ('102',)),
#  ('2018.33.1', ('703',)),
#  ('2018.33.1', ('910',)),
#  ('2018.33.1', ('915',)),
#  ('2018.33.2', ('905',)),
#  ('2018.33.3', ('93',)),
#  ('2018.33.4', ('606',)),
#  ('2018.33.4', ('693',)),
#  ('2018.33.4', ('996',)),
#  ('2018.35.1', ('67',)),
#  ('2018.35.1', ('960',)),
#  ('2018.35.2', ('171',)),
#  ('2018.35.2', ('418',)),
#  ('2018.35.2', ('672',)),
#  ('2018.35.2', ('682',)),
#  ('2018.35.2', ('836',)),
#  ('2018.35.4', ('556',))]


# {'2016': {'16': {'5': [('890',)]},
#           '20': {'1': [('924',), ('961',)],
#                  '2': [('318',), ('776',), ('829',), ('962',)],
#                  '3': [('436',), ('792',)],
#                  '5': [('996',)]},
#           '23': {'0': [('937',)], '5': [('56',), ('796',), ('942',)]},
#           '31': {'2': [('833',)],
#                  '3': [('507',),
#                        ('573',),
#                        ('58',),
#                        ('603',),
#                        ('962',),
#                        ('999',)],
#                  '5': [('135',), ('167',), ('651',), ('695',)]},
#           '33': {'0': [('148',),
#                        ('38',),
#                        ('446',),
#                        ('526',),
#                        ('832',),
#                        ('950',),
#                        ('981',)],
#                  '2': [('638',)],
#                  '3': [('714',), ('809',)],
#                  '4': [('440',), ('588',), ('952',)],
#                  '5': [('139',), ('148',), ('702',), ('933',)],
#                  '6': [('118',), ('565',), ('64',)]},
#           '35': {'0': [('296',),
#                        ('526',),
#                        ('741',),
#                        ('743',),
#                        ('757',),
#                        ('970',)],
#                  '6': [('608',), ('977',)]}},
#  '2017': {'12': {'0': [('122',), ('225',), ('725',)]},
#           '15': {'5': [('505',), ('968',)]},
#           '27': {'1': [('190',),
#                        ('24',),
#                        ('295',),
#                        ('680',),
#                        ('746',),
#                        ('829',),
#                        ('910',)],
#                  '4': [('310',), ('329',), ('805',), ('83',)],
#                  '6': [('464',), ('536',), ('571',), ('983',)]},
#           '30': {'3': [('10',), ('427',), ('462',), ('607',)],
#                  '6': [('459',), ('871',)]},
#           '31': {'1': [('561',), ('813',), ('863',)],
#                  '2': [('351',), ('608',), ('765',)],
#                  '5': [('25',), ('84',), ('984',)],
#                  '6': [('136',), ('589',), ('744',)]},
#           '43': {'2': [('205',), ('328',), ('542',), ('838',)],
#                  '5': [('134',),
#                        ('135',),
#                        ('160',),
#                        ('243',),
#                        ('547',),
#                        ('573',),
#                        ('755',),
#                        ('795',)],
#                  '6': [('167',), ('248',)]},
#           '46': {'2': [('152',), ('410',), ('625',), ('798',)],
#                  '5': [('430',), ('493',), ('872',)],
#                  '6': [('389',), ('538',)]}},
#  '2018': {'12': {'0': [('733',), ('968',)],
#                  '1': [('18',)],
#                  '3': [('837',), ('988',)],
#                  '4': [('285',), ('371',), ('520',), ('826',)],
#                  '5': [('315',), ('333',), ('417',), ('731',)]},
#           '14': {'6': [('683',)]},
#           '27': {'5': [('195',)], '6': [('2',), ('700',), ('72',), ('749',)]},
#           '33': {'0': [('102',)],
#                  '1': [('703',), ('910',), ('915',)],
#                  '2': [('905',)],
#                  '3': [('93',)],
#                  '4': [('606',), ('693',), ('996',)]},
#           '35': {'1': [('67',), ('960',)],
#                  '2': [('171',), ('418',), ('672',), ('682',), ('836',)],
#                  '4': [('556',)]}}}
